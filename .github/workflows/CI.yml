# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      write-all
    #contents: read
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: testdb
          MYSQL_ROOT_PASSWORD: testdb
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create MySQL container with volume
        run: |
          docker run -d \
            --name mysql_db \
            -e MYSQL_DATABASE=users_db \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
            -v ${{ github.workspace }}/mysql/data:/var/lib/mysql \
            -v ${{ github.workspace }}/mysql/config:/etc/mysql/conf.d \
            -v ${{ github.workspace }}/mysql/init:/docker-entrypoint-initdb.d \
            -p 3307:3306 \
            mysql/mysql-server:5.7 \
            mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

      - name: Wait for MySQL to be healthy
        run: |
          for i in {1..10}; do
            if docker exec mysql_db mysqladmin ping --silent; then
              echo "MySQL is healthy!"
              break
            else
              echo "Waiting for MySQL to be healthy..."
              sleep 5
            fi
          done

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Setup Redis
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.30.1
        with:
          redis-version: 6.2.0
          redis-port: 6379
          auto-start: true
          redis-password: 12345678
      # Redis Health Check
      - name: Redis Health Check
        run: redis-cli -h 127.0.0.1 -p 6379 -a 12345678 ping

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/testdb
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: testdb
          JWT_SECRET_KEY: asdfasdfkjalsdfjkalsdjfkljaskdlfjjaklsdjfklajdskfjaklsdjfklasdjkflajsdklfajklsdfjkalsdjfklajsdklfajkl
          SPRING_DATA_MONGODB_URL: ${{ secrets.MONGODB_URL }}
          SPRINT_REDIS_HOST: localhost
          REDIS_PASSWORD: 12345678
          GMAIL_ADDRESS: qwer@naver.com
          GMAIL_PASSWORD: 12423423
          #S3
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          #JWT_SECRET_KEY: ${secrets.JWT_SECRET_KEY}
        run: ./gradlew build --stacktrace


      # Test 후 Report 생성
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: '**/build/test-results/test/TEST-*.xml'
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0


